require("dotenv").config();
const bcrypt = require("bcrypt");
const { initDB, User, School, ClassMeeting, Student } = require("../backend/models");

const schools = [
  { name: "Test School 1" },
  { name: "Test School 2" }
];

const users = [
  { name: "Super Admin", email: "superadmin@example.com", password: "superadmin123", role: "superadmin", schoolIndex: null },
  { name: "Admin One", email: "admin1@example.com", password: "adminpassword1", role: "admin", schoolIndex: 0 },
  { name: "Admin Two", email: "admin2@example.com", password: "adminpassword2", role: "admin", schoolIndex: 1 },
  { name: "Teacher One", email: "teacher1@example.com", password: "teacherpassword1", role: "teacher", schoolIndex: 0 },
  { name: "Andriy Dykyy", email: "meet.tamamat@gmail.com", password: "12345", role: "superadmin", schoolIndex: 0 },
  { name: "Teacher Two", email: "teacher2@example.com", password: "teacherpassword2", role: "teacher", schoolIndex: 1 }
];

const lessons = [
  { className: "Superadmin Meeting", teacherEmail: "meet.tamamat@gmail.com" }, // –£—Ä–æ–∫ –¥–ª—è Andriy Dykyy
  { className: "Math Class", teacherEmail: "teacher2@example.com" } // –£—Ä–æ–∫ –¥–ª—è Teacher Two
];

const students = [
  { name: "Peter Piper", email: "peter.piper@example.com", schoolIndex: 0, className: "Superadmin Meeting" },
  { name: "Fled Flintstone", email: "fled.flintstone@example.com", schoolIndex: 0, className: "Superadmin Meeting" },
  { name: "Berry Adams", email: "berry.adams@example.com", schoolIndex: 1, className: "Math Class" }
];

const seedDB = async () => {
  try {
    await initDB();
    console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...");

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await ClassMeeting.destroy({ where: {} });
    await User.destroy({ where: {} });
    await School.destroy({ where: {} });
    await Student.destroy({ where: {} });

    console.log("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!");

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º —à–∫–æ–ª—ã
    const createdSchools = [];
    for (const schoolData of schools) {
      const school = await School.create(schoolData);
      createdSchools.push(school);
    }
    console.log("‚úÖ –®–∫–æ–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!");

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers = {};
    for (const userData of users) {
      const hashedPassword = await bcrypt.hash(userData.password, 10);
      const newUser = await User.create({
        name: userData.name,
        email: userData.email,
        password: hashedPassword,
        role: userData.role,
        schoolId: userData.schoolIndex !== null ? createdSchools[userData.schoolIndex].id : null
      });

      createdUsers[userData.email] = newUser; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} –¥–æ–±–∞–≤–ª–µ–Ω!`);
    }

    console.log("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫–∏
    const createdClasses = {};
    for (const lessonData of lessons) {
      const teacher = createdUsers[lessonData.teacherEmail];

      if (!teacher) {
        console.warn(`‚ö†Ô∏è –£—á–∏—Ç–µ–ª—å ${lessonData.teacherEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Ä–æ–∫ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.`);
        continue;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º `meetingId`
      const meetingId = `meet-${Math.random().toString(36).substring(2, 10)}`;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º `classUrl`
      const classUrl = `meet.tamamat.com/${meetingId}/${teacher.name.replace(/\s/g, "_")}/${lessonData.className.replace(/\s/g, "_")}`;

      const newLesson = await ClassMeeting.create({
        className: lessonData.className,
        meetingId,
        teacherId: teacher.id,
        classUrl
      });

      createdClasses[lessonData.className] = newLesson; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫ –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
      console.log(`‚úÖ –£—Ä–æ–∫ "${lessonData.className}" —Å–æ–∑–¥–∞–Ω –¥–ª—è ${lessonData.teacherEmail}! URL: ${classUrl}`);
    }

    console.log("‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    for (const studentData of students) {
      const school = createdSchools[studentData.schoolIndex];

      if (!school) {
        console.warn(`‚ö†Ô∏è –®–∫–æ–ª–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${studentData.schoolIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.`);
        continue;
      }

      const newStudent = await Student.create({
        name: studentData.name,
        email: studentData.email,
        schoolId: school.id
      });

      console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${studentData.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —à–∫–æ–ª—É "${school.name}"!`);

      // –°–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∫–ª–∞—Å—Å–æ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª–∞—Å—Å –µ—Å—Ç—å
      const classMeeting = createdClasses[studentData.className];

      if (classMeeting) {
        await classMeeting.addStudent(newStudent);
        console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${newStudent.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å "${classMeeting.className}"!`);
      } else {
        console.warn(`‚ö†Ô∏è –ö–ª–∞—Å—Å "${studentData.className}" –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç—É–¥–µ–Ω—Ç ${newStudent.name} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.`);
      }
    }

    console.log("üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    process.exit();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:", error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º
seedDB();
