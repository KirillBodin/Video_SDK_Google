require("dotenv").config();
const bcrypt = require("bcrypt");
const { initDB, User, ClassMeeting, Student, sequelize } = require("../backend/models");

const users = [
  { name: "Super Admin", email: "superadmin@example.com", password: "superadmin123", role: "superadmin" },
  { name: "Andriy Dykyy", email: "meet.tamamat@gmail.com", password: "superadmin123", role: "superadmin" },
  { name: "Admin One", email: "admin1@example.com", password: "adminpassword1", role: "admin" },
  { name: "Teacher One", email: "teacher1@example.com", password: "teacherpassword1", role: "teacher", adminEmail: "admin1@example.com" },
  { name: "Teacher Two", email: "teacher2@example.com", password: "teacherpassword2", role: "teacher", adminEmail: "admin1@example.com" }
];

const lessons = [
  { className: "Math Class", teacherEmail: "teacher1@example.com" },
  { className: "Science Class", teacherEmail: "teacher2@example.com" }
];

const students = [
  { name: "Peter Piper", email: "peter.piper@example.com", teacherEmail: "teacher1@example.com" },
  { name: "Fred Flintstone", email: "fred.flintstone@example.com", teacherEmail: "teacher2@example.com" }
];

const seedDB = async () => {
  const transaction = await sequelize.transaction();
  try {
    await sequelize.authenticate();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!");

    // üî• –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    await sequelize.drop({ transaction });
    console.log("üóë –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!");

    // üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    await sequelize.sync({ force: true, transaction });
    console.log("üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!");

    const createdUsers = {};

    // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userData of users) {
      const hashedPassword = await bcrypt.hash(userData.password, 10);

      let adminId = null;
      if (userData.role === "teacher" && userData.adminEmail) {
        const admin = createdUsers[userData.adminEmail];
        if (!admin) {
          console.warn(`‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userData.adminEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—á–∏—Ç–µ–ª—å –±–µ–∑ adminId.`);
        } else {
          adminId = admin.id;
        }
      }

      const newUser = await User.create({
        name: userData.name,
        email: userData.email,
        password: hashedPassword,
        role: userData.role,
        adminId
      }, { transaction });

      createdUsers[userData.email] = newUser;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} –¥–æ–±–∞–≤–ª–µ–Ω!`);
    }

    // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
    const createdLessons = {};
    for (const lessonData of lessons) {
      const teacher = createdUsers[lessonData.teacherEmail];
      if (!teacher) continue;

      const meetingId = `meet-${Math.random().toString(36).substring(2, 10)}`;
      const classUrl = `${meetingId}/${teacher.name.replace(/\s/g, "_")}/${lessonData.className.replace(/\s/g, "_")}`;
      const slug = `${teacher.name.replace(/\s/g, "-").toLowerCase()}-${lessonData.className.replace(/\s/g, "-").toLowerCase()}`;

      const lesson = await ClassMeeting.create({
        className: lessonData.className,
        meetingId,
        teacherId: teacher.id,
        teacherName: teacher.name,
        classUrl,
        slug,
      }, { transaction });

      createdLessons[lessonData.className] = lesson;
      console.log(`‚úÖ –£—Ä–æ–∫ "${lesson.className}" —Å–æ–∑–¥–∞–Ω!`);
    }

    // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —É—Ä–æ–∫–∞–º
    for (const studentData of students) {
      const teacher = createdUsers[studentData.teacherEmail];
      if (!teacher) continue;

      const student = await Student.create({
        name: studentData.name,
        email: studentData.email,
        teacherId: teacher.id
      }, { transaction });

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º –µ–≥–æ —É—á–∏—Ç–µ–ª—è
      for (const lesson of Object.values(createdLessons)) {
        if (lesson.teacherId === teacher.id) {
          await student.addClass(lesson, { transaction });
        }
      }

      console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${student.name} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—Ä–æ–∫–∞–º!`);
    }

    await transaction.commit();
    console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
    process.exit();
  } catch (error) {
    await transaction.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:", error);
    process.exit(1);
  }
};

seedDB();
