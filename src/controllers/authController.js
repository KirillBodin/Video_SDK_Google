const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { User } = require("../models");

exports.register = async (req, res) => {
  try {
    const { email, password, role } = req.body;

    if (!email || !password || !role) {
      return res.status(400).json({ error: "Email, password, and role are required" });
    }

    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ error: "User already exists" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({ email, password: hashedPassword, role });

    res.status(201).json({ message: "User registered successfully", user });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Email and password are required" });
    }

    const user = await User.findOne({ where: { email } });

    if (!user) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    // üîç –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω —à–∫–æ–ª—ã, –∏—â–µ–º –µ–≥–æ schoolId
    let schoolId = null;
    let teacherId = null;

    if (user.role === "teacher") {
      teacherId = user.id; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º teacherId –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
      schoolId = user.schoolId || null;
    } else if (user.role === "admin") {
      schoolId = user.schoolId || null;
    }

    // üîê –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å `teacherId`
    const token = jwt.sign(
      { id: user.id, role: user.role, teacherId }, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º teacherId –≤ —Ç–æ–∫–µ–Ω
      process.env.JWT_SECRET || "your_jwt_secret",
      { expiresIn: "1h" }
    );

    res.json({ 
      message: "Login successful", 
      token, 
      role: user.role, 
      teacherId, // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º teacherId –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
      schoolId   // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º schoolId —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};
