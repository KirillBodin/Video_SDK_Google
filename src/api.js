const API_BASE_URL = "https://api.videosdk.live";
const SERVER_URL = "http://localhost:5000"; // –°–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 6000

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
export const getToken = async () => {
  try {
    console.log("[API] üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω...");
    const response = await fetch(`${SERVER_URL}/api/get-token`);
    const data = await response.json();

    if (data.token) {
      console.log("[API] ‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:", data.token);
      return data.token;
    } else {
      console.error("[API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", data.error);
      return null;
    }
  } catch (error) {
    console.error("[API] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞:", error);
    return null;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
export const createMeeting = async ({ roomId }) => {
  const token = await getToken();
  if (!token) return { meetingId: null, err: "Failed to get token" };

  const url = `${API_BASE_URL}/v2/rooms`;
  const options = {
    method: "POST",
    headers: { Authorization: token, "Content-Type": "application/json" },
    body: JSON.stringify({ roomId }),
  };

  try {
    console.log("[API] üîç –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É:", roomId);
    const response = await fetch(url, options);
    const data = await response.json();
    if (data.roomId) {
      console.log("[API] ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:", data.roomId);
      return { meetingId: data.roomId, err: null };
    } else {
      console.error("[API] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", data.error);
      return { meetingId: null, err: data.error };
    }
  } catch (error) {
    console.error("[API] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:", error);
    return { meetingId: null, err: "Server error" };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export const validateMeeting = async ({ roomId }) => {
  const token = await getToken();
  if (!token) return { meetingId: null, err: "Failed to get token" };

  const url = `${API_BASE_URL}/v2/rooms/validate/${roomId}`;
  const options = {
    method: "GET",
    headers: { Authorization: token, "Content-Type": "application/json" },
  };

  try {
    console.log("[API] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:", roomId);
    const response = await fetch(url, options);
    
    if (response.status === 400) {
      console.log("[API] ‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...");
      return await createMeeting({ roomId });
    }
    
    const data = await response.json();
    if (data.roomId) {
      console.log("[API] ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞:", data.roomId);
      return { meetingId: data.roomId, err: null };
    } else {
      console.error("[API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:", data.error);
      return { meetingId: null, err: data.error };
    }
  } catch (error) {
    console.error("[API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á–∏:", error);
    return { meetingId: null, err: "Server error" };
  }
};
