import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import WaitingRoomScreen from "./screens/WaitingRoomScreen";
import { signInWithGoogle } from "../firebase";

// –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å getToken, validateMeeting –∏ —Ç.–¥.
// import { getToken, validateMeeting } from "../api";
const SERVER_URL = process.env.REACT_APP_SERVER_URL || "http://localhost:5000";
export function MeetingDetailsScreen({
  setMeetingId,
  setToken,
  onClickJoin,
  onClickStartMeeting,
  participantName,
  setParticipantName,
  videoTrack,
  setVideoTrack,
  setIsAdminView,
}) {
  const [roomName, setRoomName] = useState("");
  const [userEmail, setUserEmail] = useState("");
  // –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
  const [teachersList, setTeachersList] = useState([]);

  // –§–ª–∞–≥–∏, –∫–∞–∫–æ–π —à–∞–≥ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
  const [isJoinMeetingClicked, setIsJoinMeetingClicked] = useState(false);
  const [isCreateMeetingClicked, setIsCreateMeetingClicked] = useState(false);

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
  const [isWaitingRoom, setIsWaitingRoom] = useState(false);

  const navigate = useNavigate();
const SERVER_URL = process.env.REACT_APP_SERVER_URL || "http://localhost:5000";
  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è —á–µ–≥–æ-—Ç–æ –µ—â—ë (–Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
  useEffect(() => {
    fetch(`${SERVER_URL}/api/school-admins/users`)
      .then((res) => res.json())
      .then((data) => {
        setTeachersList(data.map((teacher) => teacher.email));
      })
      .catch(() => toast.error("Failed to load teachers list"));
  }, []);

  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å ‚ÄúWaitingRoomScreen‚Äù, –ø–æ–∫–∞ –∏–¥—ë—Ç –æ–∂–∏–¥–∞–Ω–∏–µ
  if (isWaitingRoom) {
    return <WaitingRoomScreen meetingId={roomName} />;
  }

  return (
    <div className="flex flex-col justify-center w-full md:p-[6px] sm:p-1 p-1.5 relative">
      {/* –ö–Ω–æ–ø–∫–∞, –≤–µ–¥—É—â–∞—è –Ω–∞ /admin/login */}
      <button
        className="fixed top-4 right-4 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-md z-50"
        onClick={() => navigate("/admin/login")}
      >
        Admin Panel
      </button>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ E-mail */}
      <input
        value={userEmail}
        onChange={(e) => setUserEmail(e.target.value.trim())}
        placeholder="Enter your email"
        className="px-4 py-3 bg-gray-650 rounded-xl text-white w-full text-center mb-4"
      />

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ className, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–≤–µ–ª–∏ E-mail */}
      {userEmail && (
        <input
          value={roomName}
          onChange={(e) => setRoomName(e.target.value.trim())}
          placeholder="Enter class name (e.g., classroom-101)"
          className="px-4 py-3 bg-gray-650 rounded-xl text-white w-full text-center mb-4"
        />
      )}

      {/* –ö–Ω–æ–ø–∫–∞ Login with Google, –µ—Å–ª–∏ E-mail –Ω–µ –≤–≤–µ–¥—ë–Ω */}
      {!userEmail && (
        <button
          className="w-full bg-red-500 text-white px-2 py-3 rounded-xl"
          onClick={async () => {
            try {
              const user = await signInWithGoogle();
              if (user && user.email) {
                setUserEmail(user.email.trim());
                toast.success(`Signed in as ${user.email}`, {
                  position: "bottom-left",
                  autoClose: 3000,
                  hideProgressBar: true,
                });
              }
            } catch (error) {
              toast.error("Google Sign-In Error", {
                position: "bottom-left",
                autoClose: 4000,
                hideProgressBar: true,
              });
            }
          }}
        >
          Login with Google
        </button>
      )}

      <div className="w-full md:mt-4 mt-4 flex flex-col">
        <div className="flex items-center justify-center flex-col w-full">

          {/* –®–ê–ì 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ (Create / Join), –µ—Å–ª–∏ –ù–ò –æ–¥–Ω–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞ */}
          {!isCreateMeetingClicked && !isJoinMeetingClicked && (
            <>
              {/* –ö–Ω–æ–ø–∫–∞ "Create a class" */}
              <button
                className={`w-full px-2 py-3 rounded-xl ${
                  userEmail && roomName
                    ? "bg-purple-350 text-white"
                    : "bg-gray-600 text-gray-400 cursor-not-allowed"
                }`}
                disabled={!userEmail || !roomName}
                onClick={() => {
                  console.log("[MeetingDetailsScreen] üî• 'Create a class' (Step1) clicked!");
                  setIsCreateMeetingClicked(true);
                }}
              >
                Create a class
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ "Join a class" */}
              <button
                className={`
                  w-full bg-gray-650 text-white px-2 py-3 rounded-xl mt-5
                  ${userEmail && roomName ? "" : "cursor-not-allowed opacity-50"}
                `}
                disabled={!userEmail || !roomName}
                onClick={() => {
                  console.log("[MeetingDetailsScreen] üî• 'Join a class' (Step1) clicked!");
                  setIsJoinMeetingClicked(true);
                }}
              >
                Join a class
              </button>
            </>
          )}

          {/* –®–ê–ì 2–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è (Confirm & Create), –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "Create a class" */}
          {isCreateMeetingClicked && (
            <button
              className={`
                w-full bg-green-500 text-white px-2 py-3 rounded-xl mt-3
                ${!userEmail || !roomName ? "cursor-not-allowed opacity-50" : ""}
              `}
              disabled={!userEmail || !roomName}
              onClick={async () => {
                console.log("[MeetingDetailsScreen] üî• 'Confirm & Create' clicked!");

                if (!roomName || !userEmail) {
                  toast.error("Please enter your email and class name.");
                  return;
                }

                toast.info("Creating class, please wait...");

                try {
                  // 1) –ü–æ–ª—É—á–∞–µ–º VideoSDK —Ç–æ–∫–µ–Ω
                  const tokenResponse = await fetch(`${SERVER_URL}/api/get-token`);
                  const { token } = await tokenResponse.json();

                  if (!token) {
                    console.error("[MeetingDetailsScreen] ‚ùå –¢–æ–∫–µ–Ω –ø—É—Å—Ç!");
                    toast.error("Failed to get token!");
                    return;
                  }
                  setToken(token);

                  // 2) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É
                  const meetingResponse = await fetch(`https://api.videosdk.live/v1/meetings`, {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: token,
                    },
                    body: JSON.stringify({ userMeetingId: roomName }),
                  });
                  const meetingData = await meetingResponse.json();

                  if (!meetingData.meetingId) {
                    console.error("[MeetingDetailsScreen] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", meetingData);
                    toast.error("Error creating meeting!");
                    return;
                  }
                  const newMeetingId = meetingData.meetingId;
                  console.log("[MeetingDetailsScreen] ‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞:", newMeetingId);

                  // 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–≤–æ—ë–º —Å–µ—Ä–≤–µ—Ä–µ
                  await fetch(`${SERVER_URL}/api/save-meeting`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                      className: roomName,
                      meetingId: newMeetingId,
                      teacherEmail: userEmail,
                    }),
                  })
                    .then((res) => res.json())
                    .then((data) => console.log("[MeetingDetailsScreen] ‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:", data))
                    .catch((err) => console.error("[MeetingDetailsScreen] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err));

                  // 4) –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É (onClickStartMeeting)
                  setTimeout(() => {
                    onClickStartMeeting(token, newMeetingId);
                  }, 1000);
                } catch (error) {
                  console.error("[MeetingDetailsScreen] ‚ùå –û—à–∏–±–∫–∞:", error);
                  toast.error("Server error while creating meeting!");
                }
              }}
            >
              Confirm & Create
            </button>
          )}

          {/* –®–ê–ì 2–ë: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (Confirm & Join), –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "Join a class" */}
          {isJoinMeetingClicked && (
            <button
              className={`
                w-full bg-green-500 text-white px-2 py-3 rounded-xl mt-3
                ${!userEmail || !roomName ? "cursor-not-allowed opacity-50" : ""}
              `}
              disabled={!userEmail || !roomName}
              onClick={async () => {
                console.log("[MeetingDetailsScreen] üî• 'Confirm & Join' clicked!");

                if (!userEmail || !roomName) {
                  toast.error("Please enter your email and class name.");
                  return;
                }

                try {
                  // 1) –ü–æ–ª—É—á–∞–µ–º meetingId –∏–∑ –±–∞–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é roomName
                  const response = await fetch(`http://${SERVER_URL}/api/get-meeting/${roomName}`);
                  const data = await response.json();

                  if (!data.meetingId) {
                    console.error("[MeetingDetailsScreen] ‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                    toast.error("Meeting not found!");
                    return;
                  }
                  const meetingId = data.meetingId;
                  console.log("[MeetingDetailsScreen] ‚úÖ –ù–∞–π–¥–µ–Ω meetingId:", meetingId);

                  // 2) –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
                  const tokenResponse = await fetch(`${SERVER_URL}/api/get-token`);
                  const { token } = await tokenResponse.json();

                  if (!token) {
                    console.error("[MeetingDetailsScreen] ‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ø—É—Å—Ç!");
                    toast.error("Failed to get token!");
                    return;
                  }
                  setToken(token);
                  console.log("[MeetingDetailsScreen] ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", token);

                  // 3) –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É –Ω–∞ VideoSDK
                  const validateRes = await fetch(`https://api.videosdk.live/v1/meetings/${meetingId}`, {
                    method: "GET",
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: token,
                    },
                  });

                  if (!validateRes.ok) {
                    toast.error("Meeting is invalid or does not exist in VideoSDK!");
                    return;
                  }

                  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                  setMeetingId(meetingId);
                  toast.success("Joining class...");

                  console.log("[MeetingDetailsScreen] üü¢ –í—ã–∑—ã–≤–∞–µ–º onClickJoin, meetingId:", meetingId, "token:", token);
                  onClickJoin(token, meetingId);

                } catch (error) {
                  console.error("[MeetingDetailsScreen] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Å—Ç—Ä–µ—á–∏:", error);
                  toast.error("Server error while joining!");
                }
              }}
            >
              Confirm & Join
            </button>
          )}
        </div>
      </div>
    </div>
  );
}
